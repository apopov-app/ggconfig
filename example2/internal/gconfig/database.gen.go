// Code generated by ggconfig. DO NOT EDIT.

package gconfig

import (
	"os"
	
	"gopkg.in/yaml.v3"
)

// ===== ENV Implementation =====

type databaseEnvConfig struct{}


func (c *databaseEnvConfig) Host(defaultValue string) string {
	if value := os.Getenv("DATABASE_HOST"); value != "" {
		return value
	}
	return defaultValue
}

func (c *databaseEnvConfig) Port(defaultValue string) string {
	if value := os.Getenv("DATABASE_PORT"); value != "" {
		return value
	}
	return defaultValue
}

func (c *databaseEnvConfig) User(defaultValue string) string {
	if value := os.Getenv("DATABASE_USER"); value != "" {
		return value
	}
	return defaultValue
}

func (c *databaseEnvConfig) Password(defaultValue string) string {
	if value := os.Getenv("DATABASE_PASSWORD"); value != "" {
		return value
	}
	return defaultValue
}

func (c *databaseEnvConfig) Name(defaultValue string) string {
	if value := os.Getenv("DATABASE_NAME"); value != "" {
		return value
	}
	return defaultValue
}

func (c *databaseEnvConfig) SSLMode(defaultValue string) string {
	if value := os.Getenv("DATABASE_SSL_MODE"); value != "" {
		return value
	}
	return defaultValue
}


func NewConfigDatabaseConfig() *databaseEnvConfig {
	return &databaseEnvConfig{}
}

// ===== YAML Implementation =====

type databaseYAMLConfig struct {
	data []byte
}

func NewYAMLDatabaseConfig(data []byte) *databaseYAMLConfig {
	return &databaseYAMLConfig{
		data: data,
	}
}


func (c *databaseYAMLConfig) Host(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию database
	if section, ok := config["database"].(map[string]interface{}); ok {
		if value, ok := section["host"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *databaseYAMLConfig) Port(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию database
	if section, ok := config["database"].(map[string]interface{}); ok {
		if value, ok := section["port"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *databaseYAMLConfig) User(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию database
	if section, ok := config["database"].(map[string]interface{}); ok {
		if value, ok := section["user"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *databaseYAMLConfig) Password(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию database
	if section, ok := config["database"].(map[string]interface{}); ok {
		if value, ok := section["password"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *databaseYAMLConfig) Name(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию database
	if section, ok := config["database"].(map[string]interface{}); ok {
		if value, ok := section["name"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *databaseYAMLConfig) SSLMode(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию database
	if section, ok := config["database"].(map[string]interface{}); ok {
		if value, ok := section["sslmode"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}


// ===== Mock Implementation =====

type databaseMockConfig struct{}


func (c *databaseMockConfig) Host(defaultValue string) string {
	return defaultValue
}

func (c *databaseMockConfig) Port(defaultValue string) string {
	return defaultValue
}

func (c *databaseMockConfig) User(defaultValue string) string {
	return defaultValue
}

func (c *databaseMockConfig) Password(defaultValue string) string {
	return defaultValue
}

func (c *databaseMockConfig) Name(defaultValue string) string {
	return defaultValue
}

func (c *databaseMockConfig) SSLMode(defaultValue string) string {
	return defaultValue
}


func NewMockDatabaseConfig() *databaseMockConfig {
	return &databaseMockConfig{}
}
