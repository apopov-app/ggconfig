// Code generated by ggconfig. DO NOT EDIT.

package gconfig

import (
	"os"
	"strconv"
	"gopkg.in/yaml.v3"
)

// ===== ENV Implementation =====

type serverEnvConfig struct{}


func (c *serverEnvConfig) Port(defaultValue int) int {
	if value := os.Getenv("SERVER_PORT"); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func (c *serverEnvConfig) Host(defaultValue string) string {
	if value := os.Getenv("SERVER_HOST"); value != "" {
		return value
	}
	return defaultValue
}

func (c *serverEnvConfig) ReadTimeout(defaultValue int) int {
	if value := os.Getenv("SERVER_READ_TIMEOUT"); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func (c *serverEnvConfig) WriteTimeout(defaultValue int) int {
	if value := os.Getenv("SERVER_WRITE_TIMEOUT"); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}


func NewConfigServerConfig() *serverEnvConfig {
	return &serverEnvConfig{}
}

// ===== YAML Implementation =====

type serverYAMLConfig struct {
	data []byte
}

func NewYAMLServerConfig(data []byte) *serverYAMLConfig {
	return &serverYAMLConfig{
		data: data,
	}
}


func (c *serverYAMLConfig) Port(defaultValue int) int {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию server
	if section, ok := config["server"].(map[string]interface{}); ok {
		if value, ok := section["port"].(int); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *serverYAMLConfig) Host(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию server
	if section, ok := config["server"].(map[string]interface{}); ok {
		if value, ok := section["host"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *serverYAMLConfig) ReadTimeout(defaultValue int) int {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию server
	if section, ok := config["server"].(map[string]interface{}); ok {
		if value, ok := section["readtimeout"].(int); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *serverYAMLConfig) WriteTimeout(defaultValue int) int {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию server
	if section, ok := config["server"].(map[string]interface{}); ok {
		if value, ok := section["writetimeout"].(int); ok {
			return value
		}
	}
	
	return defaultValue
}


// ===== Mock Implementation =====

type serverMockConfig struct{}


func (c *serverMockConfig) Port(defaultValue int) int {
	return defaultValue
}

func (c *serverMockConfig) Host(defaultValue string) string {
	return defaultValue
}

func (c *serverMockConfig) ReadTimeout(defaultValue int) int {
	return defaultValue
}

func (c *serverMockConfig) WriteTimeout(defaultValue int) int {
	return defaultValue
}


func NewMockServerConfig() *serverMockConfig {
	return &serverMockConfig{}
}
