// Code generated by ggconfig. DO NOT EDIT.

package genconfig

import (
	"os"
	
	"gopkg.in/yaml.v3"
	"github.com/apopov-app/ggconfig/example2/internal/db"
)

// ===== ENV Implementation =====

type dbEnvConfig struct{}


func (c *dbEnvConfig) Host(defaultValue string) string {
	if value := os.Getenv("DB_HOST"); value != "" {
		return value
	}
	return defaultValue
}

func (c *dbEnvConfig) Port(defaultValue string) string {
	if value := os.Getenv("DB_PORT"); value != "" {
		return value
	}
	return defaultValue
}

func (c *dbEnvConfig) User(defaultValue string) string {
	if value := os.Getenv("DB_USER"); value != "" {
		return value
	}
	return defaultValue
}

func (c *dbEnvConfig) Password(defaultValue string) string {
	if value := os.Getenv("DB_PASSWORD"); value != "" {
		return value
	}
	return defaultValue
}

func (c *dbEnvConfig) Name(defaultValue string) string {
	if value := os.Getenv("DB_NAME"); value != "" {
		return value
	}
	return defaultValue
}

func (c *dbEnvConfig) SSLMode(defaultValue string) string {
	if value := os.Getenv("DB_SSL_MODE"); value != "" {
		return value
	}
	return defaultValue
}


func NewConfigDb() db.Config {
	return &dbEnvConfig{}
}

// ===== YAML Implementation =====

type dbYAMLConfig struct {
	data []byte
}

func NewYAMLConfig(data []byte) db.Config {
	return &dbYAMLConfig{
		data: data,
	}
}


func (c *dbYAMLConfig) Host(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию db
	if section, ok := config["db"].(map[string]interface{}); ok {
		if value, ok := section["host"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *dbYAMLConfig) Port(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию db
	if section, ok := config["db"].(map[string]interface{}); ok {
		if value, ok := section["port"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *dbYAMLConfig) User(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию db
	if section, ok := config["db"].(map[string]interface{}); ok {
		if value, ok := section["user"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *dbYAMLConfig) Password(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию db
	if section, ok := config["db"].(map[string]interface{}); ok {
		if value, ok := section["password"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *dbYAMLConfig) Name(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию db
	if section, ok := config["db"].(map[string]interface{}); ok {
		if value, ok := section["name"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}

func (c *dbYAMLConfig) SSLMode(defaultValue string) string {
	var config map[string]interface{}
	if err := yaml.Unmarshal(c.data, &config); err != nil {
		return defaultValue
	}
	
	// Читаем секцию db
	if section, ok := config["db"].(map[string]interface{}); ok {
		if value, ok := section["sslmode"].(string); ok {
			return value
		}
	}
	
	return defaultValue
}


// ===== Mock Implementation =====

type dbMockConfig struct{}


func (c *dbMockConfig) Host(defaultValue string) string {
	return defaultValue
}

func (c *dbMockConfig) Port(defaultValue string) string {
	return defaultValue
}

func (c *dbMockConfig) User(defaultValue string) string {
	return defaultValue
}

func (c *dbMockConfig) Password(defaultValue string) string {
	return defaultValue
}

func (c *dbMockConfig) Name(defaultValue string) string {
	return defaultValue
}

func (c *dbMockConfig) SSLMode(defaultValue string) string {
	return defaultValue
}


func NewMockDb() db.Config {
	return &dbMockConfig{}
}
